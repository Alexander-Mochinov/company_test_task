# Generated by Django 3.2.7 on 2022-02-04 09:15

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(max_length=64, unique=True, verbose_name='Пользователь')),
                ('first_name', models.CharField(max_length=25, unique=True, verbose_name='Имя')),
                ('second_name', models.CharField(max_length=25, unique=True, verbose_name='Фамилия')),
                ('patronymic', models.CharField(max_length=25, unique=True, verbose_name='Отчество')),
                ('gender', models.CharField(blank=True, choices=[('M', 'Мужской'), ('F', 'Женский'), ('-', 'Не определен')], default='-', max_length=24, verbose_name='Пол')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='Дата создании')),
                ('date_of_change', models.DateTimeField(auto_now_add=True, verbose_name='Дата изменения')),
                ('date_status_change', models.DateTimeField(auto_now_add=True, verbose_name='Дата изменения статуса')),
                ('is_active', models.BooleanField(default=True, verbose_name='is_active')),
                ('is_admin', models.BooleanField(default=True, verbose_name='is_admin')),
                ('is_staff', models.BooleanField(default=False, verbose_name='is_staff')),
                ('timezone', models.CharField(blank=True, default='MSC', max_length=64, verbose_name='Часовой пояс')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'db_table': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('personal_id', models.PositiveIntegerField(default=101, unique=True, verbose_name='Идентификационный номер клиента')),
                ('type', models.CharField(blank=True, choices=[('primary', 'Первичный'), ('secondary', 'Повторный'), ('external', 'Внешний'), ('indirect', 'Косвенный')], default='primary', max_length=24, verbose_name='Тип')),
                ('phone_number', models.CharField(blank=True, max_length=12, unique=True, validators=[django.core.validators.RegexValidator(regex='^\\+7\\d{10}$')], verbose_name='Номер телефона пациента')),
            ],
            options={
                'verbose_name': 'Клиент',
                'verbose_name_plural': 'Клиенты',
                'db_table': 'client',
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('personal_id', models.PositiveIntegerField(blank=True, unique=True, verbose_name='Идентификационный номер департамента')),
                ('name', models.CharField(blank=True, max_length=128, verbose_name='Наименование департамента')),
                ('parent_department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='parent_dep', to='drf_api.department', verbose_name='Родительский департамент')),
            ],
            options={
                'verbose_name': 'Департамент',
                'verbose_name_plural': 'Департаменты',
                'db_table': 'department',
            },
        ),
        migrations.CreateModel(
            name='DepartmentLegalEntityRef',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='drf_api.department', verbose_name='департамент')),
            ],
        ),
        migrations.CreateModel(
            name='Email',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(default=None, max_length=254, null=True, verbose_name='Email')),
            ],
            options={
                'verbose_name': 'Почта',
                'verbose_name_plural': 'Почты',
                'db_table': 'email',
            },
        ),
        migrations.CreateModel(
            name='SocialNetworks',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('VK', 'VK'), ('FB', 'Facebook'), ('ОК', 'Оk'), ('INST', 'Instagram'), ('TEG', 'Telegram'), ('WA', 'WhatsApp'), ('VB', 'Viber')], default='', max_length=24, unique=True, verbose_name='Социальная сеть')),
                ('count_extend', models.PositiveSmallIntegerField(default=1, verbose_name='Кол-во использований пользователем')),
            ],
            options={
                'verbose_name': 'Социальная сеть',
                'verbose_name_plural': 'Социальные сети',
                'db_table': 'social_networks',
            },
        ),
        migrations.CreateModel(
            name='SocialNetworksRef',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(max_length=999, verbose_name='Адрес сети')),
                ('client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='drf_api.client', verbose_name='Клиент')),
                ('social_networks', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='drf_api.socialnetworks', verbose_name='Соц. сеть')),
            ],
        ),
        migrations.CreateModel(
            name='LegalEntity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('personal_id', models.PositiveIntegerField(default=102, unique=True, verbose_name='Идентификационный номер Юр. лица')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='Дата создании')),
                ('date_of_change', models.DateTimeField(auto_now_add=True, verbose_name='Дата изменения')),
                ('date_status_change', models.DateTimeField(auto_now_add=True, verbose_name='Дата изменения статуса')),
                ('full_name', models.CharField(blank=True, max_length=128, verbose_name='Полное наименование организации')),
                ('short_name', models.CharField(blank=True, max_length=128, verbose_name='Сокращённое наименование организации')),
                ('INN', models.CharField(max_length=12, unique=True, verbose_name='Идентификационный номер налогоплательщика')),
                ('KPP', models.CharField(max_length=12, unique=True, verbose_name='Код причины постановки на учёт')),
                ('departments', models.ManyToManyField(through='drf_api.DepartmentLegalEntityRef', to='drf_api.Department', verbose_name='Департаменты')),
            ],
            options={
                'verbose_name': 'Юр. лицо',
                'verbose_name_plural': 'Юр. лица',
                'db_table': 'legal_entity',
            },
        ),
        migrations.AddField(
            model_name='departmentlegalentityref',
            name='legal_entity',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='entity_departament', to='drf_api.legalentity', verbose_name='Юр. лицо'),
        ),
        migrations.CreateModel(
            name='DepartmentClientRef',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='Дата присоединения')),
                ('client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='drf_api.client', verbose_name='Физ лицо')),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='client_departament', to='drf_api.department', verbose_name='Департамент')),
            ],
        ),
        migrations.AddField(
            model_name='client',
            name='departments',
            field=models.ManyToManyField(through='drf_api.DepartmentClientRef', to='drf_api.Department', verbose_name='Департаменты'),
        ),
        migrations.AddField(
            model_name='client',
            name='social_network',
            field=models.ManyToManyField(through='drf_api.SocialNetworksRef', to='drf_api.SocialNetworks', verbose_name='Социальные сети'),
        ),
        migrations.AddField(
            model_name='client',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='client_user', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='email',
            field=models.ManyToManyField(default=None, related_name='email_users', to='drf_api.Email', verbose_name='Почта'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
